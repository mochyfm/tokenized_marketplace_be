import * as fs from 'fs';
import * as crypto from 'node:crypto';
import { BKND_CONSTANTS } from '../constants/backend.constants';
import { JWT_CONSTANTS } from 'src/constants/security.constants';

/**
 * Ensure JWT_SECRET is present in the .env file, adding it if necessary.
 *
 * @param secretKeySize The size of the secret key to generate, in bytes. Default is 32.
 */
export function ensureJwtSecretInEnv(secretKeySize: number = 32): void {
  // Generates the Secret Key for the application usage
  const generateSecretKey = (): string =>
    crypto.randomBytes(secretKeySize).toString('hex');

  // Check if the .env file exists and if it already contains JWT_SECRET
  if (
    !fs.existsSync(BKND_CONSTANTS.envFilePath) ||
    !fs
      .readFileSync(BKND_CONSTANTS.envFilePath, 'utf-8')
      .includes(JWT_CONSTANTS.jwtSecretEnvVariable)
  ) {
    // Generate a secret key
    const secretKey = generateSecretKey();

    // Check if the comment already exists
    const existingComment =
      '# Encrypted code generated by the application, remove and re-launch if you want a new one\n';

    if (
      !fs
        .readFileSync(BKND_CONSTANTS.envFilePath, 'utf-8')
        .includes(existingComment)
    ) {
      // Append comment to the .env file or create the file if it doesn't exist
      fs.appendFileSync(BKND_CONSTANTS.envFilePath, `\n${existingComment}`);
    }

    // Append JWT_SECRET to the .env file
    fs.appendFileSync(
      BKND_CONSTANTS.envFilePath,
      `${JWT_CONSTANTS.jwtSecretEnvVariable}=${secretKey}\n`,
    );
  }
}
